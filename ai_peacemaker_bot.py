import os
import logging
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –õ–æ–≥–∏
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WOODPICKER_API_KEY = os.getenv("WOODPICKER_API_KEY")
if not TELEGRAM_TOKEN or not WOODPICKER_API_KEY:
    raise SystemExit("TELEGRAM_TOKEN –∏ WOODPICKER_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç üåø –Ø —Ç–≤–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    name = " ".join(context.args)
    if name:
        users[user_id] = name
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ {name} üå∏")
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /setname –ò–º—è")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–•–æ—Ä–æ—à–æ, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É üåø")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = users.get(user_id, "–¥—Ä—É–≥")
    user_text = update.message.text

    prompt = f"""
–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–¥—Ä—É–≥.
–ü–æ–º–æ–≥–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Å—Å–æ—Ä—ã, –º—è–≥–∫–æ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –≤–µ–¥–µ—à—å –∫ –ø—Ä–∏–º–∏—Ä–µ–Ω–∏—é.
–û–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏ {user_name}.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: "{user_text}"
–î–∞–π –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∏–º–∏—Ä–µ–Ω–∏—è.
"""

    try:
        response = requests.post(
            "https://api.woodpicker.ai/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {WOODPICKER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "gpt-3.5-turbo",
                "messages": [{"role": "user", "content": prompt}],
                "temperature": 0.8,
                "max_tokens": 500
            }
        )
        data = response.json()
        reply = data["choices"][0]["message"]["content"]
        await update.message.reply_text(reply)
    except Exception as e:
        logger.error(f"WoodPicker API error: {e}")
        await update.message.reply_text("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (Background Worker)
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setname", set_name))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("Bot is running as Background Worker...")
    app.run_polling()

if __name__ == "__main__":
    main()